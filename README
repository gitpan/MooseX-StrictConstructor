NAME
    MooseX::StrictConstructor - Make your object constructors blow up on
    unknown attributes

SYNOPSIS
        package My::Class;

        use MooseX::StrictConstructor; # instead of use Moose

        has 'size' => ...;

        # then later ...

        # this blows up because color is not a known attribute
        My::Class->new( size => 5, color => 'blue' );

DESCRIPTION
    Using this class to load Moose instead of just loading using Moose
    itself makes your constructors "strict". If your constructor is called
    with an attribute init argument that your class does not declare, then
    it calls "Carp::confess()". This is a great way to catch small typos.

  Subverting Strictness
    You may find yourself wanting to accept a parameter to the constructor
    that is not the name of an attribute.

    In that case, you'll probably be writing a "BUILD()" method to deal with
    it. Your "BUILD()" method will receive two parameters, the new object,
    and a hash reference of parameters passed to the constructor.

    If you delete keys from this hash reference, then they will not be seen
    when this class does its checking.

      sub BUILD {
          my $self   = shift;
          my $params = shift;

          if ( delete $params->{do_something} ) {
              ...
          }
      }

  Caveats
    Using this class replaces the default Moose meta class,
    "Moose::Meta::Class", with its own,
    "MooseX::StrictConstructor::Meta::Class". If you have your own meta
    class, this distro will probably not work for you.

AUTHOR
    Dave Rolsky, "<autarch@urth.org>"

BUGS
    Please report any bugs or feature requests to
    "bug-moosex-strictconstructor@rt.cpan.org", or through the web interface
    at <http://rt.cpan.org>. I will be notified, and then you'll
    automatically be notified of progress on your bug as I make changes.

COPYRIGHT & LICENSE
    Copyright 2007 Dave Rolsky, All Rights Reserved.

    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

